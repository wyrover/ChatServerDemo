// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatServerMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChatServerMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace avxer {
namespace chat {

void protobuf_ShutdownFile_ChatServerMessages_2eproto() {
  delete UserLoginRequest::default_instance_;
  delete UserLoginResponse::default_instance_;
  delete UserLogoutRequest::default_instance_;
  delete AdminLoginRequest::default_instance_;
  delete AdminLogoutRequest::default_instance_;
  delete UserEnterNtfy::default_instance_;
  delete UserLeaveNtfy::default_instance_;
  delete RoomChatMessage::default_instance_;
  delete SystemChatMessage::default_instance_;
  delete PrivateChatMessage::default_instance_;
  delete KeepAliveNtfy::default_instance_;
  delete PingRequest::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ChatServerMessages_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ChatServerMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  UserLoginRequest::default_instance_ = new UserLoginRequest();
  UserLoginResponse::default_instance_ = new UserLoginResponse();
  UserLogoutRequest::default_instance_ = new UserLogoutRequest();
  AdminLoginRequest::default_instance_ = new AdminLoginRequest();
  AdminLogoutRequest::default_instance_ = new AdminLogoutRequest();
  UserEnterNtfy::default_instance_ = new UserEnterNtfy();
  UserLeaveNtfy::default_instance_ = new UserLeaveNtfy();
  RoomChatMessage::default_instance_ = new RoomChatMessage();
  SystemChatMessage::default_instance_ = new SystemChatMessage();
  PrivateChatMessage::default_instance_ = new PrivateChatMessage();
  KeepAliveNtfy::default_instance_ = new KeepAliveNtfy();
  PingRequest::default_instance_ = new PingRequest();
  UserLoginRequest::default_instance_->InitAsDefaultInstance();
  UserLoginResponse::default_instance_->InitAsDefaultInstance();
  UserLogoutRequest::default_instance_->InitAsDefaultInstance();
  AdminLoginRequest::default_instance_->InitAsDefaultInstance();
  AdminLogoutRequest::default_instance_->InitAsDefaultInstance();
  UserEnterNtfy::default_instance_->InitAsDefaultInstance();
  UserLeaveNtfy::default_instance_->InitAsDefaultInstance();
  RoomChatMessage::default_instance_->InitAsDefaultInstance();
  SystemChatMessage::default_instance_->InitAsDefaultInstance();
  PrivateChatMessage::default_instance_->InitAsDefaultInstance();
  KeepAliveNtfy::default_instance_->InitAsDefaultInstance();
  PingRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChatServerMessages_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ChatServerMessages_2eproto_once_);
void protobuf_AddDesc_ChatServerMessages_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ChatServerMessages_2eproto_once_,
                 &protobuf_AddDesc_ChatServerMessages_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChatServerMessages_2eproto {
  StaticDescriptorInitializer_ChatServerMessages_2eproto() {
    protobuf_AddDesc_ChatServerMessages_2eproto();
  }
} static_descriptor_initializer_ChatServerMessages_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int UserLoginRequest::kLoginNameFieldNumber;
const int UserLoginRequest::kLoginPasswdFieldNumber;
#endif  // !_MSC_VER

UserLoginRequest::UserLoginRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserLoginRequest::InitAsDefaultInstance() {
}

UserLoginRequest::UserLoginRequest(const UserLoginRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginRequest::~UserLoginRequest() {
  SharedDtor();
}

void UserLoginRequest::SharedDtor() {
  if (login_name_ != &::google::protobuf::internal::kEmptyString) {
    delete login_name_;
  }
  if (login_passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete login_passwd_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserLoginRequest& UserLoginRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

UserLoginRequest* UserLoginRequest::default_instance_ = NULL;

UserLoginRequest* UserLoginRequest::New() const {
  return new UserLoginRequest;
}

void UserLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_login_name()) {
      if (login_name_ != &::google::protobuf::internal::kEmptyString) {
        login_name_->clear();
      }
    }
    if (has_login_passwd()) {
      if (login_passwd_ != &::google::protobuf::internal::kEmptyString) {
        login_passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string login_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_login_passwd;
        break;
      }

      // required string login_passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string login_name = 1;
  if (has_login_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->login_name(), output);
  }

  // required string login_passwd = 2;
  if (has_login_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->login_passwd(), output);
  }

}

int UserLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string login_name = 1;
    if (has_login_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_name());
    }

    // required string login_passwd = 2;
    if (has_login_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_passwd());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserLoginRequest*>(&from));
}

void UserLoginRequest::MergeFrom(const UserLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login_name()) {
      set_login_name(from.login_name());
    }
    if (from.has_login_passwd()) {
      set_login_passwd(from.login_passwd());
    }
  }
}

void UserLoginRequest::CopyFrom(const UserLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserLoginRequest::Swap(UserLoginRequest* other) {
  if (other != this) {
    std::swap(login_name_, other->login_name_);
    std::swap(login_passwd_, other->login_passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserLoginRequest::GetTypeName() const {
  return "avxer.chat.UserLoginRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

UserLoginResponse::UserLoginResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserLoginResponse::InitAsDefaultInstance() {
}

UserLoginResponse::UserLoginResponse(const UserLoginResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginResponse::~UserLoginResponse() {
  SharedDtor();
}

void UserLoginResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserLoginResponse& UserLoginResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

UserLoginResponse* UserLoginResponse::default_instance_ = NULL;

UserLoginResponse* UserLoginResponse::New() const {
  return new UserLoginResponse;
}

void UserLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

}

int UserLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserLoginResponse*>(&from));
}

void UserLoginResponse::MergeFrom(const UserLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
}

void UserLoginResponse::CopyFrom(const UserLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserLoginResponse::Swap(UserLoginResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserLoginResponse::GetTypeName() const {
  return "avxer.chat.UserLoginResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UserLogoutRequest::UserLogoutRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserLogoutRequest::InitAsDefaultInstance() {
}

UserLogoutRequest::UserLogoutRequest(const UserLogoutRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserLogoutRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLogoutRequest::~UserLogoutRequest() {
  SharedDtor();
}

void UserLogoutRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserLogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserLogoutRequest& UserLogoutRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

UserLogoutRequest* UserLogoutRequest::default_instance_ = NULL;

UserLogoutRequest* UserLogoutRequest::New() const {
  return new UserLogoutRequest;
}

void UserLogoutRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserLogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void UserLogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int UserLogoutRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLogoutRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserLogoutRequest*>(&from));
}

void UserLogoutRequest::MergeFrom(const UserLogoutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void UserLogoutRequest::CopyFrom(const UserLogoutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogoutRequest::IsInitialized() const {

  return true;
}

void UserLogoutRequest::Swap(UserLogoutRequest* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserLogoutRequest::GetTypeName() const {
  return "avxer.chat.UserLogoutRequest";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AdminLoginRequest::AdminLoginRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AdminLoginRequest::InitAsDefaultInstance() {
}

AdminLoginRequest::AdminLoginRequest(const AdminLoginRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AdminLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminLoginRequest::~AdminLoginRequest() {
  SharedDtor();
}

void AdminLoginRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AdminLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AdminLoginRequest& AdminLoginRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

AdminLoginRequest* AdminLoginRequest::default_instance_ = NULL;

AdminLoginRequest* AdminLoginRequest::New() const {
  return new AdminLoginRequest;
}

void AdminLoginRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AdminLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void AdminLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int AdminLoginRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminLoginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminLoginRequest*>(&from));
}

void AdminLoginRequest::MergeFrom(const AdminLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void AdminLoginRequest::CopyFrom(const AdminLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminLoginRequest::IsInitialized() const {

  return true;
}

void AdminLoginRequest::Swap(AdminLoginRequest* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AdminLoginRequest::GetTypeName() const {
  return "avxer.chat.AdminLoginRequest";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AdminLogoutRequest::AdminLogoutRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AdminLogoutRequest::InitAsDefaultInstance() {
}

AdminLogoutRequest::AdminLogoutRequest(const AdminLogoutRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AdminLogoutRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminLogoutRequest::~AdminLogoutRequest() {
  SharedDtor();
}

void AdminLogoutRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AdminLogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AdminLogoutRequest& AdminLogoutRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

AdminLogoutRequest* AdminLogoutRequest::default_instance_ = NULL;

AdminLogoutRequest* AdminLogoutRequest::New() const {
  return new AdminLogoutRequest;
}

void AdminLogoutRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AdminLogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void AdminLogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int AdminLogoutRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminLogoutRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminLogoutRequest*>(&from));
}

void AdminLogoutRequest::MergeFrom(const AdminLogoutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void AdminLogoutRequest::CopyFrom(const AdminLogoutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminLogoutRequest::IsInitialized() const {

  return true;
}

void AdminLogoutRequest::Swap(AdminLogoutRequest* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AdminLogoutRequest::GetTypeName() const {
  return "avxer.chat.AdminLogoutRequest";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UserEnterNtfy::UserEnterNtfy()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserEnterNtfy::InitAsDefaultInstance() {
}

UserEnterNtfy::UserEnterNtfy(const UserEnterNtfy& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserEnterNtfy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserEnterNtfy::~UserEnterNtfy() {
  SharedDtor();
}

void UserEnterNtfy::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserEnterNtfy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEnterNtfy& UserEnterNtfy::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

UserEnterNtfy* UserEnterNtfy::default_instance_ = NULL;

UserEnterNtfy* UserEnterNtfy::New() const {
  return new UserEnterNtfy;
}

void UserEnterNtfy::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserEnterNtfy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void UserEnterNtfy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int UserEnterNtfy::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEnterNtfy::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEnterNtfy*>(&from));
}

void UserEnterNtfy::MergeFrom(const UserEnterNtfy& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void UserEnterNtfy::CopyFrom(const UserEnterNtfy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEnterNtfy::IsInitialized() const {

  return true;
}

void UserEnterNtfy::Swap(UserEnterNtfy* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserEnterNtfy::GetTypeName() const {
  return "avxer.chat.UserEnterNtfy";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UserLeaveNtfy::UserLeaveNtfy()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserLeaveNtfy::InitAsDefaultInstance() {
}

UserLeaveNtfy::UserLeaveNtfy(const UserLeaveNtfy& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserLeaveNtfy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLeaveNtfy::~UserLeaveNtfy() {
  SharedDtor();
}

void UserLeaveNtfy::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserLeaveNtfy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserLeaveNtfy& UserLeaveNtfy::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

UserLeaveNtfy* UserLeaveNtfy::default_instance_ = NULL;

UserLeaveNtfy* UserLeaveNtfy::New() const {
  return new UserLeaveNtfy;
}

void UserLeaveNtfy::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserLeaveNtfy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void UserLeaveNtfy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int UserLeaveNtfy::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLeaveNtfy::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserLeaveNtfy*>(&from));
}

void UserLeaveNtfy::MergeFrom(const UserLeaveNtfy& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void UserLeaveNtfy::CopyFrom(const UserLeaveNtfy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLeaveNtfy::IsInitialized() const {

  return true;
}

void UserLeaveNtfy::Swap(UserLeaveNtfy* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserLeaveNtfy::GetTypeName() const {
  return "avxer.chat.UserLeaveNtfy";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RoomChatMessage::RoomChatMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RoomChatMessage::InitAsDefaultInstance() {
}

RoomChatMessage::RoomChatMessage(const RoomChatMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RoomChatMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomChatMessage::~RoomChatMessage() {
  SharedDtor();
}

void RoomChatMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RoomChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RoomChatMessage& RoomChatMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

RoomChatMessage* RoomChatMessage::default_instance_ = NULL;

RoomChatMessage* RoomChatMessage::New() const {
  return new RoomChatMessage;
}

void RoomChatMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RoomChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void RoomChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int RoomChatMessage::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomChatMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RoomChatMessage*>(&from));
}

void RoomChatMessage::MergeFrom(const RoomChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void RoomChatMessage::CopyFrom(const RoomChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomChatMessage::IsInitialized() const {

  return true;
}

void RoomChatMessage::Swap(RoomChatMessage* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RoomChatMessage::GetTypeName() const {
  return "avxer.chat.RoomChatMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SystemChatMessage::SystemChatMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SystemChatMessage::InitAsDefaultInstance() {
}

SystemChatMessage::SystemChatMessage(const SystemChatMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SystemChatMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemChatMessage::~SystemChatMessage() {
  SharedDtor();
}

void SystemChatMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SystemChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemChatMessage& SystemChatMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

SystemChatMessage* SystemChatMessage::default_instance_ = NULL;

SystemChatMessage* SystemChatMessage::New() const {
  return new SystemChatMessage;
}

void SystemChatMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SystemChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void SystemChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int SystemChatMessage::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemChatMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemChatMessage*>(&from));
}

void SystemChatMessage::MergeFrom(const SystemChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void SystemChatMessage::CopyFrom(const SystemChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemChatMessage::IsInitialized() const {

  return true;
}

void SystemChatMessage::Swap(SystemChatMessage* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SystemChatMessage::GetTypeName() const {
  return "avxer.chat.SystemChatMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PrivateChatMessage::PrivateChatMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PrivateChatMessage::InitAsDefaultInstance() {
}

PrivateChatMessage::PrivateChatMessage(const PrivateChatMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PrivateChatMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrivateChatMessage::~PrivateChatMessage() {
  SharedDtor();
}

void PrivateChatMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PrivateChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PrivateChatMessage& PrivateChatMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

PrivateChatMessage* PrivateChatMessage::default_instance_ = NULL;

PrivateChatMessage* PrivateChatMessage::New() const {
  return new PrivateChatMessage;
}

void PrivateChatMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PrivateChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void PrivateChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int PrivateChatMessage::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateChatMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PrivateChatMessage*>(&from));
}

void PrivateChatMessage::MergeFrom(const PrivateChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void PrivateChatMessage::CopyFrom(const PrivateChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateChatMessage::IsInitialized() const {

  return true;
}

void PrivateChatMessage::Swap(PrivateChatMessage* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PrivateChatMessage::GetTypeName() const {
  return "avxer.chat.PrivateChatMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

KeepAliveNtfy::KeepAliveNtfy()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void KeepAliveNtfy::InitAsDefaultInstance() {
}

KeepAliveNtfy::KeepAliveNtfy(const KeepAliveNtfy& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void KeepAliveNtfy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeepAliveNtfy::~KeepAliveNtfy() {
  SharedDtor();
}

void KeepAliveNtfy::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void KeepAliveNtfy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KeepAliveNtfy& KeepAliveNtfy::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

KeepAliveNtfy* KeepAliveNtfy::default_instance_ = NULL;

KeepAliveNtfy* KeepAliveNtfy::New() const {
  return new KeepAliveNtfy;
}

void KeepAliveNtfy::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool KeepAliveNtfy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void KeepAliveNtfy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int KeepAliveNtfy::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepAliveNtfy::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KeepAliveNtfy*>(&from));
}

void KeepAliveNtfy::MergeFrom(const KeepAliveNtfy& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void KeepAliveNtfy::CopyFrom(const KeepAliveNtfy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAliveNtfy::IsInitialized() const {

  return true;
}

void KeepAliveNtfy::Swap(KeepAliveNtfy* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string KeepAliveNtfy::GetTypeName() const {
  return "avxer.chat.KeepAliveNtfy";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PingRequest::PingRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PingRequest::InitAsDefaultInstance() {
}

PingRequest::PingRequest(const PingRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PingRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingRequest::~PingRequest() {
  SharedDtor();
}

void PingRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PingRequest& PingRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

PingRequest* PingRequest::default_instance_ = NULL;

PingRequest* PingRequest::New() const {
  return new PingRequest;
}

void PingRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void PingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int PingRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PingRequest*>(&from));
}

void PingRequest::MergeFrom(const PingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void PingRequest::CopyFrom(const PingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {

  return true;
}

void PingRequest::Swap(PingRequest* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PingRequest::GetTypeName() const {
  return "avxer.chat.PingRequest";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat
}  // namespace avxer

// @@protoc_insertion_point(global_scope)
