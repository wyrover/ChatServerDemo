// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatServerMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChatServerMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace avxer {
namespace chat {

void protobuf_ShutdownFile_ChatServerMessages_2eproto() {
  delete UserLoginRequest::default_instance_;
  delete UserLoginResponse::default_instance_;
  delete UserLogoutRequest::default_instance_;
  delete CreatRoomRequest::default_instance_;
  delete CreatRoomResponse::default_instance_;
  delete EnterRoomRequest::default_instance_;
  delete EnterRoomResponse::default_instance_;
  delete GroupChatRequest::default_instance_;
  delete GroupChatNtfy::default_instance_;
  delete UserEnteredNtfy::default_instance_;
  delete LeaveRoomRequest::default_instance_;
  delete UserLeavedNtfy::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ChatServerMessages_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ChatServerMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  UserLoginRequest::default_instance_ = new UserLoginRequest();
  UserLoginResponse::default_instance_ = new UserLoginResponse();
  UserLogoutRequest::default_instance_ = new UserLogoutRequest();
  CreatRoomRequest::default_instance_ = new CreatRoomRequest();
  CreatRoomResponse::default_instance_ = new CreatRoomResponse();
  EnterRoomRequest::default_instance_ = new EnterRoomRequest();
  EnterRoomResponse::default_instance_ = new EnterRoomResponse();
  GroupChatRequest::default_instance_ = new GroupChatRequest();
  GroupChatNtfy::default_instance_ = new GroupChatNtfy();
  UserEnteredNtfy::default_instance_ = new UserEnteredNtfy();
  LeaveRoomRequest::default_instance_ = new LeaveRoomRequest();
  UserLeavedNtfy::default_instance_ = new UserLeavedNtfy();
  UserLoginRequest::default_instance_->InitAsDefaultInstance();
  UserLoginResponse::default_instance_->InitAsDefaultInstance();
  UserLogoutRequest::default_instance_->InitAsDefaultInstance();
  CreatRoomRequest::default_instance_->InitAsDefaultInstance();
  CreatRoomResponse::default_instance_->InitAsDefaultInstance();
  EnterRoomRequest::default_instance_->InitAsDefaultInstance();
  EnterRoomResponse::default_instance_->InitAsDefaultInstance();
  GroupChatRequest::default_instance_->InitAsDefaultInstance();
  GroupChatNtfy::default_instance_->InitAsDefaultInstance();
  UserEnteredNtfy::default_instance_->InitAsDefaultInstance();
  LeaveRoomRequest::default_instance_->InitAsDefaultInstance();
  UserLeavedNtfy::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChatServerMessages_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ChatServerMessages_2eproto_once_);
void protobuf_AddDesc_ChatServerMessages_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ChatServerMessages_2eproto_once_,
                 &protobuf_AddDesc_ChatServerMessages_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChatServerMessages_2eproto {
  StaticDescriptorInitializer_ChatServerMessages_2eproto() {
    protobuf_AddDesc_ChatServerMessages_2eproto();
  }
} static_descriptor_initializer_ChatServerMessages_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int UserLoginRequest::kLoginNameFieldNumber;
const int UserLoginRequest::kLoginPasswdFieldNumber;
#endif  // !_MSC_VER

UserLoginRequest::UserLoginRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserLoginRequest::InitAsDefaultInstance() {
}

UserLoginRequest::UserLoginRequest(const UserLoginRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginRequest::~UserLoginRequest() {
  SharedDtor();
}

void UserLoginRequest::SharedDtor() {
  if (login_name_ != &::google::protobuf::internal::kEmptyString) {
    delete login_name_;
  }
  if (login_passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete login_passwd_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserLoginRequest& UserLoginRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

UserLoginRequest* UserLoginRequest::default_instance_ = NULL;

UserLoginRequest* UserLoginRequest::New() const {
  return new UserLoginRequest;
}

void UserLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_login_name()) {
      if (login_name_ != &::google::protobuf::internal::kEmptyString) {
        login_name_->clear();
      }
    }
    if (has_login_passwd()) {
      if (login_passwd_ != &::google::protobuf::internal::kEmptyString) {
        login_passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string login_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_login_passwd;
        break;
      }

      // required string login_passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string login_name = 1;
  if (has_login_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->login_name(), output);
  }

  // required string login_passwd = 2;
  if (has_login_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->login_passwd(), output);
  }

}

int UserLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string login_name = 1;
    if (has_login_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_name());
    }

    // required string login_passwd = 2;
    if (has_login_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_passwd());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserLoginRequest*>(&from));
}

void UserLoginRequest::MergeFrom(const UserLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login_name()) {
      set_login_name(from.login_name());
    }
    if (from.has_login_passwd()) {
      set_login_passwd(from.login_passwd());
    }
  }
}

void UserLoginRequest::CopyFrom(const UserLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserLoginRequest::Swap(UserLoginRequest* other) {
  if (other != this) {
    std::swap(login_name_, other->login_name_);
    std::swap(login_passwd_, other->login_passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserLoginRequest::GetTypeName() const {
  return "com.avxer.chat.UserLoginRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

UserLoginResponse::UserLoginResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserLoginResponse::InitAsDefaultInstance() {
}

UserLoginResponse::UserLoginResponse(const UserLoginResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginResponse::~UserLoginResponse() {
  SharedDtor();
}

void UserLoginResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserLoginResponse& UserLoginResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

UserLoginResponse* UserLoginResponse::default_instance_ = NULL;

UserLoginResponse* UserLoginResponse::New() const {
  return new UserLoginResponse;
}

void UserLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

}

int UserLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserLoginResponse*>(&from));
}

void UserLoginResponse::MergeFrom(const UserLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
}

void UserLoginResponse::CopyFrom(const UserLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserLoginResponse::Swap(UserLoginResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserLoginResponse::GetTypeName() const {
  return "com.avxer.chat.UserLoginResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UserLogoutRequest::UserLogoutRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserLogoutRequest::InitAsDefaultInstance() {
}

UserLogoutRequest::UserLogoutRequest(const UserLogoutRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserLogoutRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLogoutRequest::~UserLogoutRequest() {
  SharedDtor();
}

void UserLogoutRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserLogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserLogoutRequest& UserLogoutRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

UserLogoutRequest* UserLogoutRequest::default_instance_ = NULL;

UserLogoutRequest* UserLogoutRequest::New() const {
  return new UserLogoutRequest;
}

void UserLogoutRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserLogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void UserLogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int UserLogoutRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLogoutRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserLogoutRequest*>(&from));
}

void UserLogoutRequest::MergeFrom(const UserLogoutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void UserLogoutRequest::CopyFrom(const UserLogoutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogoutRequest::IsInitialized() const {

  return true;
}

void UserLogoutRequest::Swap(UserLogoutRequest* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserLogoutRequest::GetTypeName() const {
  return "com.avxer.chat.UserLogoutRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CreatRoomRequest::kMaxUserCountFieldNumber;
const int CreatRoomRequest::kRoomNameFieldNumber;
const int CreatRoomRequest::kRoomPasswdFieldNumber;
#endif  // !_MSC_VER

CreatRoomRequest::CreatRoomRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CreatRoomRequest::InitAsDefaultInstance() {
}

CreatRoomRequest::CreatRoomRequest(const CreatRoomRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CreatRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  max_user_count_ = 0u;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatRoomRequest::~CreatRoomRequest() {
  SharedDtor();
}

void CreatRoomRequest::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (room_passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete room_passwd_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreatRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreatRoomRequest& CreatRoomRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

CreatRoomRequest* CreatRoomRequest::default_instance_ = NULL;

CreatRoomRequest* CreatRoomRequest::New() const {
  return new CreatRoomRequest;
}

void CreatRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_user_count_ = 0u;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
    if (has_room_passwd()) {
      if (room_passwd_ != &::google::protobuf::internal::kEmptyString) {
        room_passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CreatRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 max_user_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_user_count_)));
          set_has_max_user_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }

      // optional string room_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_passwd;
        break;
      }

      // optional string room_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 max_user_count = 1;
  if (has_max_user_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_user_count(), output);
  }

  // optional string room_name = 2;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_name(), output);
  }

  // optional string room_passwd = 3;
  if (has_room_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->room_passwd(), output);
  }

}

int CreatRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 max_user_count = 1;
    if (has_max_user_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_user_count());
    }

    // optional string room_name = 2;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional string room_passwd = 3;
    if (has_room_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_passwd());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatRoomRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreatRoomRequest*>(&from));
}

void CreatRoomRequest::MergeFrom(const CreatRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_user_count()) {
      set_max_user_count(from.max_user_count());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_room_passwd()) {
      set_room_passwd(from.room_passwd());
    }
  }
}

void CreatRoomRequest::CopyFrom(const CreatRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreatRoomRequest::Swap(CreatRoomRequest* other) {
  if (other != this) {
    std::swap(max_user_count_, other->max_user_count_);
    std::swap(room_name_, other->room_name_);
    std::swap(room_passwd_, other->room_passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreatRoomRequest::GetTypeName() const {
  return "com.avxer.chat.CreatRoomRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CreatRoomResponse::kErrorCodeFieldNumber;
const int CreatRoomResponse::kRoomIdFieldNumber;
#endif  // !_MSC_VER

CreatRoomResponse::CreatRoomResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CreatRoomResponse::InitAsDefaultInstance() {
}

CreatRoomResponse::CreatRoomResponse(const CreatRoomResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CreatRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatRoomResponse::~CreatRoomResponse() {
  SharedDtor();
}

void CreatRoomResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreatRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreatRoomResponse& CreatRoomResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

CreatRoomResponse* CreatRoomResponse::default_instance_ = NULL;

CreatRoomResponse* CreatRoomResponse::New() const {
  return new CreatRoomResponse;
}

void CreatRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    room_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CreatRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

}

int CreatRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional uint32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatRoomResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreatRoomResponse*>(&from));
}

void CreatRoomResponse::MergeFrom(const CreatRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
}

void CreatRoomResponse::CopyFrom(const CreatRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreatRoomResponse::Swap(CreatRoomResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreatRoomResponse::GetTypeName() const {
  return "com.avxer.chat.CreatRoomResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int EnterRoomRequest::kRoomIdFieldNumber;
const int EnterRoomRequest::kRoomPasswdFieldNumber;
#endif  // !_MSC_VER

EnterRoomRequest::EnterRoomRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EnterRoomRequest::InitAsDefaultInstance() {
}

EnterRoomRequest::EnterRoomRequest(const EnterRoomRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EnterRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  room_passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRoomRequest::~EnterRoomRequest() {
  SharedDtor();
}

void EnterRoomRequest::SharedDtor() {
  if (room_passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete room_passwd_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnterRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnterRoomRequest& EnterRoomRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

EnterRoomRequest* EnterRoomRequest::default_instance_ = NULL;

EnterRoomRequest* EnterRoomRequest::New() const {
  return new EnterRoomRequest;
}

void EnterRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
    if (has_room_passwd()) {
      if (room_passwd_ != &::google::protobuf::internal::kEmptyString) {
        room_passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EnterRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_passwd;
        break;
      }

      // optional string room_passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  // optional string room_passwd = 2;
  if (has_room_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_passwd(), output);
  }

}

int EnterRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional string room_passwd = 2;
    if (has_room_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_passwd());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnterRoomRequest*>(&from));
}

void EnterRoomRequest::MergeFrom(const EnterRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_passwd()) {
      set_room_passwd(from.room_passwd());
    }
  }
}

void EnterRoomRequest::CopyFrom(const EnterRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnterRoomRequest::Swap(EnterRoomRequest* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(room_passwd_, other->room_passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnterRoomRequest::GetTypeName() const {
  return "com.avxer.chat.EnterRoomRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EnterRoomResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

EnterRoomResponse::EnterRoomResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EnterRoomResponse::InitAsDefaultInstance() {
}

EnterRoomResponse::EnterRoomResponse(const EnterRoomResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EnterRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRoomResponse::~EnterRoomResponse() {
  SharedDtor();
}

void EnterRoomResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnterRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnterRoomResponse& EnterRoomResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

EnterRoomResponse* EnterRoomResponse::default_instance_ = NULL;

EnterRoomResponse* EnterRoomResponse::New() const {
  return new EnterRoomResponse;
}

void EnterRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EnterRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

}

int EnterRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnterRoomResponse*>(&from));
}

void EnterRoomResponse::MergeFrom(const EnterRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
}

void EnterRoomResponse::CopyFrom(const EnterRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnterRoomResponse::Swap(EnterRoomResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnterRoomResponse::GetTypeName() const {
  return "com.avxer.chat.EnterRoomResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GroupChatRequest::kRoomIdFieldNumber;
const int GroupChatRequest::kMessageContentFieldNumber;
#endif  // !_MSC_VER

GroupChatRequest::GroupChatRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GroupChatRequest::InitAsDefaultInstance() {
}

GroupChatRequest::GroupChatRequest(const GroupChatRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GroupChatRequest::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  message_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupChatRequest::~GroupChatRequest() {
  SharedDtor();
}

void GroupChatRequest::SharedDtor() {
  if (message_content_ != &::google::protobuf::internal::kEmptyString) {
    delete message_content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupChatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupChatRequest& GroupChatRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

GroupChatRequest* GroupChatRequest::default_instance_ = NULL;

GroupChatRequest* GroupChatRequest::New() const {
  return new GroupChatRequest;
}

void GroupChatRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
    if (has_message_content()) {
      if (message_content_ != &::google::protobuf::internal::kEmptyString) {
        message_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GroupChatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message_content;
        break;
      }

      // required bytes message_content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupChatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  // required bytes message_content = 2;
  if (has_message_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->message_content(), output);
  }

}

int GroupChatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // required bytes message_content = 2;
    if (has_message_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_content());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupChatRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupChatRequest*>(&from));
}

void GroupChatRequest::MergeFrom(const GroupChatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_message_content()) {
      set_message_content(from.message_content());
    }
  }
}

void GroupChatRequest::CopyFrom(const GroupChatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupChatRequest::Swap(GroupChatRequest* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(message_content_, other->message_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupChatRequest::GetTypeName() const {
  return "com.avxer.chat.GroupChatRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GroupChatNtfy::kRoomIdFieldNumber;
const int GroupChatNtfy::kMessageContentFieldNumber;
const int GroupChatNtfy::kSenderUserIdFieldNumber;
#endif  // !_MSC_VER

GroupChatNtfy::GroupChatNtfy()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GroupChatNtfy::InitAsDefaultInstance() {
}

GroupChatNtfy::GroupChatNtfy(const GroupChatNtfy& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GroupChatNtfy::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  message_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sender_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupChatNtfy::~GroupChatNtfy() {
  SharedDtor();
}

void GroupChatNtfy::SharedDtor() {
  if (message_content_ != &::google::protobuf::internal::kEmptyString) {
    delete message_content_;
  }
  if (sender_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_user_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupChatNtfy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupChatNtfy& GroupChatNtfy::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

GroupChatNtfy* GroupChatNtfy::default_instance_ = NULL;

GroupChatNtfy* GroupChatNtfy::New() const {
  return new GroupChatNtfy;
}

void GroupChatNtfy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
    if (has_message_content()) {
      if (message_content_ != &::google::protobuf::internal::kEmptyString) {
        message_content_->clear();
      }
    }
    if (has_sender_user_id()) {
      if (sender_user_id_ != &::google::protobuf::internal::kEmptyString) {
        sender_user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GroupChatNtfy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message_content;
        break;
      }

      // required bytes message_content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sender_user_id;
        break;
      }

      // required string sender_user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_user_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupChatNtfy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  // required bytes message_content = 2;
  if (has_message_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->message_content(), output);
  }

  // required string sender_user_id = 3;
  if (has_sender_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sender_user_id(), output);
  }

}

int GroupChatNtfy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // required bytes message_content = 2;
    if (has_message_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_content());
    }

    // required string sender_user_id = 3;
    if (has_sender_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_user_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupChatNtfy::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupChatNtfy*>(&from));
}

void GroupChatNtfy::MergeFrom(const GroupChatNtfy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_message_content()) {
      set_message_content(from.message_content());
    }
    if (from.has_sender_user_id()) {
      set_sender_user_id(from.sender_user_id());
    }
  }
}

void GroupChatNtfy::CopyFrom(const GroupChatNtfy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChatNtfy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GroupChatNtfy::Swap(GroupChatNtfy* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(message_content_, other->message_content_);
    std::swap(sender_user_id_, other->sender_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupChatNtfy::GetTypeName() const {
  return "com.avxer.chat.GroupChatNtfy";
}


// ===================================================================

#ifndef _MSC_VER
const int UserEnteredNtfy::kUserIdFieldNumber;
const int UserEnteredNtfy::kNickNameFieldNumber;
#endif  // !_MSC_VER

UserEnteredNtfy::UserEnteredNtfy()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserEnteredNtfy::InitAsDefaultInstance() {
}

UserEnteredNtfy::UserEnteredNtfy(const UserEnteredNtfy& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserEnteredNtfy::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserEnteredNtfy::~UserEnteredNtfy() {
  SharedDtor();
}

void UserEnteredNtfy::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserEnteredNtfy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEnteredNtfy& UserEnteredNtfy::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

UserEnteredNtfy* UserEnteredNtfy::default_instance_ = NULL;

UserEnteredNtfy* UserEnteredNtfy::New() const {
  return new UserEnteredNtfy;
}

void UserEnteredNtfy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserEnteredNtfy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // required string nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserEnteredNtfy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_id(), output);
  }

  // required string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick_name(), output);
  }

}

int UserEnteredNtfy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // required string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEnteredNtfy::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEnteredNtfy*>(&from));
}

void UserEnteredNtfy::MergeFrom(const UserEnteredNtfy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
}

void UserEnteredNtfy::CopyFrom(const UserEnteredNtfy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEnteredNtfy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserEnteredNtfy::Swap(UserEnteredNtfy* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserEnteredNtfy::GetTypeName() const {
  return "com.avxer.chat.UserEnteredNtfy";
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveRoomRequest::kRoomIdFieldNumber;
#endif  // !_MSC_VER

LeaveRoomRequest::LeaveRoomRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LeaveRoomRequest::InitAsDefaultInstance() {
}

LeaveRoomRequest::LeaveRoomRequest(const LeaveRoomRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveRoomRequest::~LeaveRoomRequest() {
  SharedDtor();
}

void LeaveRoomRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LeaveRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LeaveRoomRequest& LeaveRoomRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

LeaveRoomRequest* LeaveRoomRequest::default_instance_ = NULL;

LeaveRoomRequest* LeaveRoomRequest::New() const {
  return new LeaveRoomRequest;
}

void LeaveRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LeaveRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

}

int LeaveRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveRoomRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LeaveRoomRequest*>(&from));
}

void LeaveRoomRequest::MergeFrom(const LeaveRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
}

void LeaveRoomRequest::CopyFrom(const LeaveRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LeaveRoomRequest::Swap(LeaveRoomRequest* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LeaveRoomRequest::GetTypeName() const {
  return "com.avxer.chat.LeaveRoomRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int UserLeavedNtfy::kUserIdFieldNumber;
#endif  // !_MSC_VER

UserLeavedNtfy::UserLeavedNtfy()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserLeavedNtfy::InitAsDefaultInstance() {
}

UserLeavedNtfy::UserLeavedNtfy(const UserLeavedNtfy& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserLeavedNtfy::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLeavedNtfy::~UserLeavedNtfy() {
  SharedDtor();
}

void UserLeavedNtfy::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserLeavedNtfy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserLeavedNtfy& UserLeavedNtfy::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatServerMessages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatServerMessages_2eproto();
#endif
  return *default_instance_;
}

UserLeavedNtfy* UserLeavedNtfy::default_instance_ = NULL;

UserLeavedNtfy* UserLeavedNtfy::New() const {
  return new UserLeavedNtfy;
}

void UserLeavedNtfy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserLeavedNtfy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLeavedNtfy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_id(), output);
  }

}

int UserLeavedNtfy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLeavedNtfy::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserLeavedNtfy*>(&from));
}

void UserLeavedNtfy::MergeFrom(const UserLeavedNtfy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
}

void UserLeavedNtfy::CopyFrom(const UserLeavedNtfy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLeavedNtfy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserLeavedNtfy::Swap(UserLeavedNtfy* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserLeavedNtfy::GetTypeName() const {
  return "com.avxer.chat.UserLeavedNtfy";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat
}  // namespace avxer
}  // namespace com

// @@protoc_insertion_point(global_scope)
