// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatServerMessages.proto

#ifndef PROTOBUF_ChatServerMessages_2eproto__INCLUDED
#define PROTOBUF_ChatServerMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace avxer {
namespace chat {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ChatServerMessages_2eproto();
void protobuf_AssignDesc_ChatServerMessages_2eproto();
void protobuf_ShutdownFile_ChatServerMessages_2eproto();

class UserLoginRequest;
class UserLoginResponse;
class UserLogoutRequest;
class AdminLoginRequest;
class AdminLogoutRequest;
class UserEnterNtfy;
class UserLeaveNtfy;
class RoomChatMessage;
class SystemChatMessage;
class PrivateChatMessage;
class KeepAliveNtfy;
class PingRequest;

// ===================================================================

class UserLoginRequest : public ::google::protobuf::MessageLite {
 public:
  UserLoginRequest();
  virtual ~UserLoginRequest();

  UserLoginRequest(const UserLoginRequest& from);

  inline UserLoginRequest& operator=(const UserLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const UserLoginRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserLoginRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserLoginRequest* other);

  // implements Message ----------------------------------------------

  UserLoginRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserLoginRequest& from);
  void MergeFrom(const UserLoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string login_name = 1;
  inline bool has_login_name() const;
  inline void clear_login_name();
  static const int kLoginNameFieldNumber = 1;
  inline const ::std::string& login_name() const;
  inline void set_login_name(const ::std::string& value);
  inline void set_login_name(const char* value);
  inline void set_login_name(const char* value, size_t size);
  inline ::std::string* mutable_login_name();
  inline ::std::string* release_login_name();
  inline void set_allocated_login_name(::std::string* login_name);

  // required string login_passwd = 2;
  inline bool has_login_passwd() const;
  inline void clear_login_passwd();
  static const int kLoginPasswdFieldNumber = 2;
  inline const ::std::string& login_passwd() const;
  inline void set_login_passwd(const ::std::string& value);
  inline void set_login_passwd(const char* value);
  inline void set_login_passwd(const char* value, size_t size);
  inline ::std::string* mutable_login_passwd();
  inline ::std::string* release_login_passwd();
  inline void set_allocated_login_passwd(::std::string* login_passwd);

  // @@protoc_insertion_point(class_scope:avxer.chat.UserLoginRequest)
 private:
  inline void set_has_login_name();
  inline void clear_has_login_name();
  inline void set_has_login_passwd();
  inline void clear_has_login_passwd();

  ::std::string* login_name_;
  ::std::string* login_passwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_ChatServerMessages_2eproto();
  friend void protobuf_ShutdownFile_ChatServerMessages_2eproto();

  void InitAsDefaultInstance();
  static UserLoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginResponse : public ::google::protobuf::MessageLite {
 public:
  UserLoginResponse();
  virtual ~UserLoginResponse();

  UserLoginResponse(const UserLoginResponse& from);

  inline UserLoginResponse& operator=(const UserLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const UserLoginResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserLoginResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserLoginResponse* other);

  // implements Message ----------------------------------------------

  UserLoginResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserLoginResponse& from);
  void MergeFrom(const UserLoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:avxer.chat.UserLoginResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_ChatServerMessages_2eproto();
  friend void protobuf_ShutdownFile_ChatServerMessages_2eproto();

  void InitAsDefaultInstance();
  static UserLoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class UserLogoutRequest : public ::google::protobuf::MessageLite {
 public:
  UserLogoutRequest();
  virtual ~UserLogoutRequest();

  UserLogoutRequest(const UserLogoutRequest& from);

  inline UserLogoutRequest& operator=(const UserLogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const UserLogoutRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserLogoutRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserLogoutRequest* other);

  // implements Message ----------------------------------------------

  UserLogoutRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserLogoutRequest& from);
  void MergeFrom(const UserLogoutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:avxer.chat.UserLogoutRequest)
 private:


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_ChatServerMessages_2eproto();
  friend void protobuf_ShutdownFile_ChatServerMessages_2eproto();

  void InitAsDefaultInstance();
  static UserLogoutRequest* default_instance_;
};
// -------------------------------------------------------------------

class AdminLoginRequest : public ::google::protobuf::MessageLite {
 public:
  AdminLoginRequest();
  virtual ~AdminLoginRequest();

  AdminLoginRequest(const AdminLoginRequest& from);

  inline AdminLoginRequest& operator=(const AdminLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const AdminLoginRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AdminLoginRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AdminLoginRequest* other);

  // implements Message ----------------------------------------------

  AdminLoginRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AdminLoginRequest& from);
  void MergeFrom(const AdminLoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:avxer.chat.AdminLoginRequest)
 private:


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_ChatServerMessages_2eproto();
  friend void protobuf_ShutdownFile_ChatServerMessages_2eproto();

  void InitAsDefaultInstance();
  static AdminLoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class AdminLogoutRequest : public ::google::protobuf::MessageLite {
 public:
  AdminLogoutRequest();
  virtual ~AdminLogoutRequest();

  AdminLogoutRequest(const AdminLogoutRequest& from);

  inline AdminLogoutRequest& operator=(const AdminLogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const AdminLogoutRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AdminLogoutRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AdminLogoutRequest* other);

  // implements Message ----------------------------------------------

  AdminLogoutRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AdminLogoutRequest& from);
  void MergeFrom(const AdminLogoutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:avxer.chat.AdminLogoutRequest)
 private:


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_ChatServerMessages_2eproto();
  friend void protobuf_ShutdownFile_ChatServerMessages_2eproto();

  void InitAsDefaultInstance();
  static AdminLogoutRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserEnterNtfy : public ::google::protobuf::MessageLite {
 public:
  UserEnterNtfy();
  virtual ~UserEnterNtfy();

  UserEnterNtfy(const UserEnterNtfy& from);

  inline UserEnterNtfy& operator=(const UserEnterNtfy& from) {
    CopyFrom(from);
    return *this;
  }

  static const UserEnterNtfy& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserEnterNtfy* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserEnterNtfy* other);

  // implements Message ----------------------------------------------

  UserEnterNtfy* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserEnterNtfy& from);
  void MergeFrom(const UserEnterNtfy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:avxer.chat.UserEnterNtfy)
 private:


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_ChatServerMessages_2eproto();
  friend void protobuf_ShutdownFile_ChatServerMessages_2eproto();

  void InitAsDefaultInstance();
  static UserEnterNtfy* default_instance_;
};
// -------------------------------------------------------------------

class UserLeaveNtfy : public ::google::protobuf::MessageLite {
 public:
  UserLeaveNtfy();
  virtual ~UserLeaveNtfy();

  UserLeaveNtfy(const UserLeaveNtfy& from);

  inline UserLeaveNtfy& operator=(const UserLeaveNtfy& from) {
    CopyFrom(from);
    return *this;
  }

  static const UserLeaveNtfy& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserLeaveNtfy* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserLeaveNtfy* other);

  // implements Message ----------------------------------------------

  UserLeaveNtfy* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserLeaveNtfy& from);
  void MergeFrom(const UserLeaveNtfy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:avxer.chat.UserLeaveNtfy)
 private:


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_ChatServerMessages_2eproto();
  friend void protobuf_ShutdownFile_ChatServerMessages_2eproto();

  void InitAsDefaultInstance();
  static UserLeaveNtfy* default_instance_;
};
// -------------------------------------------------------------------

class RoomChatMessage : public ::google::protobuf::MessageLite {
 public:
  RoomChatMessage();
  virtual ~RoomChatMessage();

  RoomChatMessage(const RoomChatMessage& from);

  inline RoomChatMessage& operator=(const RoomChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const RoomChatMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RoomChatMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RoomChatMessage* other);

  // implements Message ----------------------------------------------

  RoomChatMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RoomChatMessage& from);
  void MergeFrom(const RoomChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:avxer.chat.RoomChatMessage)
 private:


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_ChatServerMessages_2eproto();
  friend void protobuf_ShutdownFile_ChatServerMessages_2eproto();

  void InitAsDefaultInstance();
  static RoomChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class SystemChatMessage : public ::google::protobuf::MessageLite {
 public:
  SystemChatMessage();
  virtual ~SystemChatMessage();

  SystemChatMessage(const SystemChatMessage& from);

  inline SystemChatMessage& operator=(const SystemChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const SystemChatMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SystemChatMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SystemChatMessage* other);

  // implements Message ----------------------------------------------

  SystemChatMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SystemChatMessage& from);
  void MergeFrom(const SystemChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:avxer.chat.SystemChatMessage)
 private:


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_ChatServerMessages_2eproto();
  friend void protobuf_ShutdownFile_ChatServerMessages_2eproto();

  void InitAsDefaultInstance();
  static SystemChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class PrivateChatMessage : public ::google::protobuf::MessageLite {
 public:
  PrivateChatMessage();
  virtual ~PrivateChatMessage();

  PrivateChatMessage(const PrivateChatMessage& from);

  inline PrivateChatMessage& operator=(const PrivateChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const PrivateChatMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PrivateChatMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PrivateChatMessage* other);

  // implements Message ----------------------------------------------

  PrivateChatMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PrivateChatMessage& from);
  void MergeFrom(const PrivateChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:avxer.chat.PrivateChatMessage)
 private:


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_ChatServerMessages_2eproto();
  friend void protobuf_ShutdownFile_ChatServerMessages_2eproto();

  void InitAsDefaultInstance();
  static PrivateChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class KeepAliveNtfy : public ::google::protobuf::MessageLite {
 public:
  KeepAliveNtfy();
  virtual ~KeepAliveNtfy();

  KeepAliveNtfy(const KeepAliveNtfy& from);

  inline KeepAliveNtfy& operator=(const KeepAliveNtfy& from) {
    CopyFrom(from);
    return *this;
  }

  static const KeepAliveNtfy& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const KeepAliveNtfy* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(KeepAliveNtfy* other);

  // implements Message ----------------------------------------------

  KeepAliveNtfy* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const KeepAliveNtfy& from);
  void MergeFrom(const KeepAliveNtfy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:avxer.chat.KeepAliveNtfy)
 private:


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_ChatServerMessages_2eproto();
  friend void protobuf_ShutdownFile_ChatServerMessages_2eproto();

  void InitAsDefaultInstance();
  static KeepAliveNtfy* default_instance_;
};
// -------------------------------------------------------------------

class PingRequest : public ::google::protobuf::MessageLite {
 public:
  PingRequest();
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const PingRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PingRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PingRequest* other);

  // implements Message ----------------------------------------------

  PingRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:avxer.chat.PingRequest)
 private:


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ChatServerMessages_2eproto();
  #endif
  friend void protobuf_AssignDesc_ChatServerMessages_2eproto();
  friend void protobuf_ShutdownFile_ChatServerMessages_2eproto();

  void InitAsDefaultInstance();
  static PingRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// UserLoginRequest

// required string login_name = 1;
inline bool UserLoginRequest::has_login_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginRequest::set_has_login_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginRequest::clear_has_login_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginRequest::clear_login_name() {
  if (login_name_ != &::google::protobuf::internal::kEmptyString) {
    login_name_->clear();
  }
  clear_has_login_name();
}
inline const ::std::string& UserLoginRequest::login_name() const {
  return *login_name_;
}
inline void UserLoginRequest::set_login_name(const ::std::string& value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::kEmptyString) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
}
inline void UserLoginRequest::set_login_name(const char* value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::kEmptyString) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
}
inline void UserLoginRequest::set_login_name(const char* value, size_t size) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::kEmptyString) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLoginRequest::mutable_login_name() {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::kEmptyString) {
    login_name_ = new ::std::string;
  }
  return login_name_;
}
inline ::std::string* UserLoginRequest::release_login_name() {
  clear_has_login_name();
  if (login_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_name_;
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserLoginRequest::set_allocated_login_name(::std::string* login_name) {
  if (login_name_ != &::google::protobuf::internal::kEmptyString) {
    delete login_name_;
  }
  if (login_name) {
    set_has_login_name();
    login_name_ = login_name;
  } else {
    clear_has_login_name();
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string login_passwd = 2;
inline bool UserLoginRequest::has_login_passwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLoginRequest::set_has_login_passwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLoginRequest::clear_has_login_passwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLoginRequest::clear_login_passwd() {
  if (login_passwd_ != &::google::protobuf::internal::kEmptyString) {
    login_passwd_->clear();
  }
  clear_has_login_passwd();
}
inline const ::std::string& UserLoginRequest::login_passwd() const {
  return *login_passwd_;
}
inline void UserLoginRequest::set_login_passwd(const ::std::string& value) {
  set_has_login_passwd();
  if (login_passwd_ == &::google::protobuf::internal::kEmptyString) {
    login_passwd_ = new ::std::string;
  }
  login_passwd_->assign(value);
}
inline void UserLoginRequest::set_login_passwd(const char* value) {
  set_has_login_passwd();
  if (login_passwd_ == &::google::protobuf::internal::kEmptyString) {
    login_passwd_ = new ::std::string;
  }
  login_passwd_->assign(value);
}
inline void UserLoginRequest::set_login_passwd(const char* value, size_t size) {
  set_has_login_passwd();
  if (login_passwd_ == &::google::protobuf::internal::kEmptyString) {
    login_passwd_ = new ::std::string;
  }
  login_passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLoginRequest::mutable_login_passwd() {
  set_has_login_passwd();
  if (login_passwd_ == &::google::protobuf::internal::kEmptyString) {
    login_passwd_ = new ::std::string;
  }
  return login_passwd_;
}
inline ::std::string* UserLoginRequest::release_login_passwd() {
  clear_has_login_passwd();
  if (login_passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_passwd_;
    login_passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserLoginRequest::set_allocated_login_passwd(::std::string* login_passwd) {
  if (login_passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete login_passwd_;
  }
  if (login_passwd) {
    set_has_login_passwd();
    login_passwd_ = login_passwd;
  } else {
    clear_has_login_passwd();
    login_passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UserLoginResponse

// required int32 error_code = 1;
inline bool UserLoginResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 UserLoginResponse::error_code() const {
  return error_code_;
}
inline void UserLoginResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// UserLogoutRequest

// -------------------------------------------------------------------

// AdminLoginRequest

// -------------------------------------------------------------------

// AdminLogoutRequest

// -------------------------------------------------------------------

// UserEnterNtfy

// -------------------------------------------------------------------

// UserLeaveNtfy

// -------------------------------------------------------------------

// RoomChatMessage

// -------------------------------------------------------------------

// SystemChatMessage

// -------------------------------------------------------------------

// PrivateChatMessage

// -------------------------------------------------------------------

// KeepAliveNtfy

// -------------------------------------------------------------------

// PingRequest


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat
}  // namespace avxer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChatServerMessages_2eproto__INCLUDED
